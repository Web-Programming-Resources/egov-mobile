<?xml version="1.0" encoding="UTF-8"?>
<project name="kuantified" default="help">

	<!-- if sdk.dir was not set from one of the property file, then get it from 
		the ANDROID_HOME env var. This must be done before we load project.properties 
		since the proguard config can use sdk.dir -->


	<property environment="env" />
	<property name="app.name" value="EGov Android Application" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="gen.dir" value="${basedir}/gen" />
	<property name="libs.dir" value="${basedir}/libs" />
	<property name="class.dir" value="${basedir}/bin/classes" />
	<property name="javadoc.dir" value="${basedir}/bin/javadoc" />

	<condition property="sdk.dir" value="${env.ANDROID_HOME}">
		<isset property="env.ANDROID_HOME" />
	</condition>

	<!-- The project.properties file is created and updated by the 'android' 
		tool, as well as ADT. This contains project specific properties such as project 
		target, and library dependencies. Lower level build properties are stored 
		in ant.properties (or in .classpath for Eclipse projects). This file is an 
		integral part of the build system for your application and should be checked 
		into Version Control Systems. -->

	<loadproperties srcFile="project.properties" />

	<!-- quick check on sdk.dir -->

	<fail
		message="sdk.dir is missing. Make sure to generate local.properties using &apos;android update project&apos; or to inject it through the ANDROID_HOME environment variable."
		unless="sdk.dir" />

	<!-- Import per project custom build rules if present at the root of the 
		project. This is the place to put custom intermediary targets such as: -pre-build 
		-pre-compile -post-compile (This is typically used for code obfuscation. 
		Compiled code location: ${out.classes.absolute.dir} If this is not done in 
		place, override ${out.dex.input.absolute.dir}) -post-package -post-build 
		-pre-clean -->

	<import file="custom_rules.xml" optional="true" />

	<!-- Import the actual build file. To customize existing targets, there 
		are two options: - Customize only one target: - copy/paste the target into 
		this file, *before* the <import> task. - customize it to your needs. - Customize 
		the whole content of build.xml - copy/paste the content of the rules files 
		(minus the top node) into this file, replacing the <import> task. - customize 
		to your needs. *********************** ****** IMPORTANT ****** *********************** 
		In all cases you must update the value of version-tag below to read 'custom' 
		instead of an integer, in order to avoid having your file be overridden by 
		tools such as "android update project" -->
	<!-- version-tag: 1 -->

	<import file="${sdk.dir}/tools/ant/build.xml" />

	<path id="compile.dependencies">
		<fileset dir="${libs.dir}" includes="*.jar" />
		<fileset dir="D:/sdk/android/sdk-windows/platforms/android-17"
			includes="*.jar" />
	</path>

	<target name="clean.javadoc">
		<echo>Delete all files in ${javadoc.dir}...	</echo>
		<delete dir="${javadoc.dir}" includeemptydirs="true" includes="**/*" />
	</target>

	<target name="javadoc" depends="clean.javadoc">

		<javadoc author="true" defaultexcludes="yes" destdir="${javadoc.dir}"
			use="true" version="true" windowtitle="${app.name}">

			<fileset dir="${src.dir}" />
			<fileset dir="${gen.dir}" />

			<classpath refid="compile.dependencies" />

			<doctitle><![CDATA[<h1>${app.name}</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2014 Kuantified. All Rights Reserved.</i>]]></bottom>

		</javadoc>
	</target>

</project>